import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO
import numpy as np
import statsmodels.api as sm
import pdfkit
import os

def to_pdf(df, title):
    html = f"""
    <html>
    <head>
    <title>{title}</title>
    </head>
    <body>
    <h1>Report generated by Data Explorer - An Open Source Website For Semi Automated Data Analysis made by Tripathi Aditya Prakash</h1>
    {df.to_html()}
    </body>
    </html>
    """
    pdfkit.from_string(html, 'report.pdf')
    with open('report.pdf', 'rb') as f:
        pdf = f.read()
    os.remove('report.pdf')  # Clean up the generated PDF file
    return pdf


def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Sheet1')
    processed_data = output.getvalue()
    return processed_data

st.title("Auto Exploration Data analysis")
st.write("This Data Explorer app lets you see multiple CSV files in interactive mode and lets you see their statistics and visualization.")

uploaded_files = st.file_uploader("Choose CSV files", accept_multiple_files=True, type="csv")
for uploaded_file in uploaded_files:
    with st.container():
        st.write("Data Description of file:", uploaded_file.name)
        dataframe = pd.read_csv(uploaded_file)
        if not dataframe.empty:
            st.write(f"File: **{uploaded_file.name}**")
            # Converting bytes to MB for a more user-friendly display
            size_in_bytes = dataframe.memory_usage(deep=True).sum()
            st.write(f"Size: **{size_in_bytes / (1024 * 1024):.2f} MB**")
            st.write(f"Shape: **{dataframe.shape[0]} rows, {dataframe.shape[1]} columns**")
      
            if st.checkbox('Show Data Cleaning Options', key=f'clean_{uploaded_file.name}'):
                if st.button('Remove Duplicates', key=f'remove_duplicates_{uploaded_file.name}'):
                    dataframe.drop_duplicates(inplace=True)
                    st.write("Duplicates removed!")

                if st.button('Fill Missing Values with Mean', key=f'fill_missing_{uploaded_file.name}'):
                    numeric_cols = dataframe.select_dtypes(include=[np.number]).columns
                    for col in numeric_cols:
                        dataframe[col].fillna((dataframe[col].mean()), inplace=True)
                    st.write("Missing values filled with mean!")

                if st.button('Remove Null Values', key=f'remove_null_{uploaded_file.name}'):
                    dataframe.dropna(inplace=True)
                    st.write("Null values removed!")

            st.write("Dataframe Overview")
            st.dataframe(dataframe)
            st.write("Data Types in Dataframe")
            st.table(dataframe.dtypes)

            # if st.checkbox('Show Data Transformation Options', key=f'transform_{uploaded_file.name}'):
            #     transformation_options = st.multiselect(
            #         'Select transformations to apply',
            #         ['Normalize Numeric Data', 'One-Hot Encode Categorical Data'],
            #         key=f'transform_options_{uploaded_file.name}'
            #     )

            #     if 'Normalize Numeric Data' in transformation_options:
            #         numeric_cols = dataframe.select_dtypes(include=[np.number]).columns
            #         dataframe[numeric_cols] = (dataframe[numeric_cols] - dataframe[numeric_cols].mean()) / dataframe[numeric_cols].std()
            #         st.write("Numeric data normalized.")

            #     if 'One-Hot Encode Categorical Data' in transformation_options:
            #         categorical_cols = dataframe.select_dtypes(include=['object']).columns
            #         dataframe = pd.get_dummies(dataframe, columns=categorical_cols)
            #         st.write("Categorical data one-hot encoded.")

            # st.dataframe(dataframe)

            st.write("Statistical Operations on Dataframe")
            st.table(dataframe.describe())
            # numerical = dataframe.select_dtypes(include=["number", "float64"])
            # categorical = dataframe.select_dtypes(include=["object"])
            # st.write("Correlation Among Numerical Columns")
            # st.table(numerical.corr())

            if st.checkbox('Show Advanced Statistical Analysis', key=f'advanced_stats_{uploaded_file.name}'):
                st.write("Advanced Statistical Analysis")

                if st.checkbox('Perform Linear Regression Analysis', key=f'linear_reg_{uploaded_file.name}'):
                    numeric_cols = numerical.columns
                    st.write("Numeric Columns:", numeric_cols)

                    x_var = st.selectbox('Select the predictor variable', numeric_cols, key=f'x_var_{uploaded_file.name}')
                    y_var = st.selectbox('Select the response variable', numeric_cols, key=f'y_var_{uploaded_file.name}')

                    if st.button('Run Linear Regression', key=f'run_linear_{uploaded_file.name}'):
                        X = sm.add_constant(dataframe[[x_var]])  # adding a constant
                        Y = dataframe[y_var]

                        model = sm.OLS(Y, X).fit()
                        predictions = model.predict(X)

                        st.write(model.summary())

            option_numerical = st.multiselect('Select numerical columns to plot', list(numerical.columns), key=f'num_cols_{uploaded_file.name}')
            option_categorical = st.multiselect('Select categorical columns to plot', list(categorical.columns), key=f'cat_cols_{uploaded_file.name}')

            # Plotting for categorical data
            if option_categorical:
                for col in option_categorical:
                    fig = px.bar(categorical, x=col)
                    st.plotly_chart(fig)

            # Plotting for numerical data
            if option_numerical:
                for col in option_numerical:
                    fig = px.line(numerical, y=col)
                    st.plotly_chart(fig)
          
            df_xlsx = to_excel(dataframe)
            st.download_button(label='ðŸ“¥ Download Current Result as Excel',
                               data=df_xlsx,
                               file_name='dataframe.xlsx')
           # df_pdf = to_pdf(dataframe, "Data Analysis Report")
           # st.download_button(label="ðŸ“¥ Download Current Result as PDF",
           #        data=df_pdf,
           #        file_name="data_analysis_report.pdf",
           #        mime="application/pdf")


with st.form("my_form"):
    st.write("Feedback")
    feedback = st.text_area("Share your feedback or request a feature")
    submitted = st.form_submit_button("Submit")
    if submitted:
        st.write("Thanks for your feedback!")